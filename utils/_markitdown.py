#!/usr/bin/env python3
import os
import argparse
import html2text
import re

def convert_html_to_markdown(html_content):
    """Convert HTML content to Markdown, preserving 11ty front matter."""
    text_maker = html2text.HTML2Text()
    text_maker.ignore_links = False
    text_maker.ignore_images = True
    markdown_content = text_maker.handle(html_content)
    return markdown_content

def extract_and_preserve_front_matter(html_content):
    """Extract 11ty front matter and return it along with the rest of the content."""
    front_matter_pattern = r"^(---[\s\S]*?---)"
    match = re.search(front_matter_pattern, html_content)
    if match:
        front_matter = match.group(1)
        # Remove the front matter from the original content
        content_without_front_matter = re.sub(front_matter_pattern, '', html_content, count=1)
        return front_matter, content_without_front_matter
    else:
        # Define default front matter with a comment about autogeneration
        default_front_matter = "---\n# Autogenerated Front Matter\n---"
        return default_front_matter, html_content

def process_directory(directory):
    """Process each HTML file in the directory and its subdirectories, preserving or adding 11ty front matter."""
    for subdir, dirs, files in os.walk(directory):
        for file in files:
            filepath = os.path.join(subdir, file)
            if filepath.endswith(".html"):
                with open(filepath, 'r', encoding='utf-8') as f:
                    html_content = f.read()
                
                front_matter, html_content_without_front_matter = extract_and_preserve_front_matter(html_content)
                markdown_content = convert_html_to_markdown(html_content_without_front_matter)
                full_content = front_matter + "\n" + markdown_content if front_matter else markdown_content
                markdown_file_path = filepath.rsplit('.', 1)[0] + '.md'
                
                with open(markdown_file_path, 'w', encoding='utf-8') as f:
                    f.write(full_content)
                
                print(f"Converted {filepath} to {markdown_file_path}")

def main():
    parser = argparse.ArgumentParser(description="Convert all HTML files in a directory to Markdown, preserving or adding 11ty front matter")
    parser.add_argument('directory', type=str, nargs='?', help='Directory to process')
    
    args = parser.parse_args()
    
    if args.directory:
        process_directory(args.directory)
    else:
        print("Please specify a directory. Usage: ./script.py <directory>")

if __name__ == "__main__":
    main()
